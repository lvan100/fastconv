/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fastconv

import (
	"errors"
	"testing"
)

func TestConvert_Int(t *testing.T) {

	t.Run("int", func(t *testing.T) {
		success[int, bool](t, 3, true)
		success[int, bool](t, 0, false)
		success[int, int](t, 3, 3)
		success[int, int8](t, 3, 3)
		success[int, int16](t, 3, 3)
		success[int, int32](t, 3, 3)
		success[int, int64](t, 3, 3)
		success[int, uint](t, 3, 3)
		success[int, uint8](t, 3, 3)
		success[int, uint16](t, 3, 3)
		success[int, uint32](t, 3, 3)
		success[int, uint64](t, 3, 3)
		success[int, float32](t, 3, 3)
		success[int, float64](t, 3, 3)
		success[int, string](t, 3, "3")
		success[int, interface{}](t, 3, int64(3))

		fail[int, uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int, complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int, complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int, []int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int, [3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int, func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int, chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int, map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int, struct{}](t, 3, errors.New("can't convert int64 to struct {}"))

		success[int, *bool](t, 3, Ptr(true))
		success[int, *bool](t, 0, Ptr(false))
		success[int, *int](t, 3, Ptr(int(3)))
		success[int, *int8](t, 3, Ptr(int8(3)))
		success[int, *int16](t, 3, Ptr(int16(3)))
		success[int, *int32](t, 3, Ptr(int32(3)))
		success[int, *int64](t, 3, Ptr(int64(3)))
		success[int, *uint](t, 3, Ptr(uint(3)))
		success[int, *uint8](t, 3, Ptr(uint8(3)))
		success[int, *uint16](t, 3, Ptr(uint16(3)))
		success[int, *uint32](t, 3, Ptr(uint32(3)))
		success[int, *uint64](t, 3, Ptr(uint64(3)))
		success[int, *float32](t, 3, Ptr(float32(3)))
		success[int, *float64](t, 3, Ptr(float64(3)))
		success[int, *string](t, 3, Ptr("3"))

		fail[int, *uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int, *complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int, *complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int, *[]int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int, *[3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int, *func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int, *chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int, *map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int, *struct{}](t, 3, errors.New("can't convert int64 to struct {}"))
	})

	t.Run("int8", func(t *testing.T) {
		success[int8, bool](t, 3, true)
		success[int8, bool](t, 0, false)
		success[int8, int](t, 3, 3)
		success[int8, int8](t, 3, 3)
		success[int8, int16](t, 3, 3)
		success[int8, int32](t, 3, 3)
		success[int8, int64](t, 3, 3)
		success[int8, uint](t, 3, 3)
		success[int8, uint8](t, 3, 3)
		success[int8, uint16](t, 3, 3)
		success[int8, uint32](t, 3, 3)
		success[int8, uint64](t, 3, 3)
		success[int8, float32](t, 3, 3)
		success[int8, float64](t, 3, 3)
		success[int8, string](t, 3, "3")
		success[int8, interface{}](t, 3, int64(3))

		fail[int8, uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int8, complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int8, complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int8, []int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int8, [3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int8, func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int8, chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int8, map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int8, struct{}](t, 3, errors.New("can't convert int64 to struct {}"))

		success[int8, *bool](t, 3, Ptr(true))
		success[int8, *bool](t, 0, Ptr(false))
		success[int8, *int](t, 3, Ptr(int(3)))
		success[int8, *int8](t, 3, Ptr(int8(3)))
		success[int8, *int16](t, 3, Ptr(int16(3)))
		success[int8, *int32](t, 3, Ptr(int32(3)))
		success[int8, *int64](t, 3, Ptr(int64(3)))
		success[int8, *uint](t, 3, Ptr(uint(3)))
		success[int8, *uint8](t, 3, Ptr(uint8(3)))
		success[int8, *uint16](t, 3, Ptr(uint16(3)))
		success[int8, *uint32](t, 3, Ptr(uint32(3)))
		success[int8, *uint64](t, 3, Ptr(uint64(3)))
		success[int8, *float32](t, 3, Ptr(float32(3)))
		success[int8, *float64](t, 3, Ptr(float64(3)))
		success[int8, *string](t, 3, Ptr("3"))

		fail[int8, *uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int8, *complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int8, *complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int8, *[]int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int8, *[3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int8, *func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int8, *chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int8, *map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int8, *struct{}](t, 3, errors.New("can't convert int64 to struct {}"))
	})

	t.Run("int16", func(t *testing.T) {
		success[int16, bool](t, 3, true)
		success[int16, bool](t, 0, false)
		success[int16, int](t, 3, 3)
		success[int16, int8](t, 3, 3)
		success[int16, int16](t, 3, 3)
		success[int16, int32](t, 3, 3)
		success[int16, int64](t, 3, 3)
		success[int16, uint](t, 3, 3)
		success[int16, uint8](t, 3, 3)
		success[int16, uint16](t, 3, 3)
		success[int16, uint32](t, 3, 3)
		success[int16, uint64](t, 3, 3)
		success[int16, float32](t, 3, 3)
		success[int16, float64](t, 3, 3)
		success[int16, string](t, 3, "3")
		success[int16, interface{}](t, 3, int64(3))

		fail[int16, uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int16, complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int16, complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int16, []int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int16, [3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int16, func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int16, chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int16, map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int16, struct{}](t, 3, errors.New("can't convert int64 to struct {}"))

		success[int16, *bool](t, 3, Ptr(true))
		success[int16, *bool](t, 0, Ptr(false))
		success[int16, *int](t, 3, Ptr(int(3)))
		success[int16, *int8](t, 3, Ptr(int8(3)))
		success[int16, *int16](t, 3, Ptr(int16(3)))
		success[int16, *int32](t, 3, Ptr(int32(3)))
		success[int16, *int64](t, 3, Ptr(int64(3)))
		success[int16, *uint](t, 3, Ptr(uint(3)))
		success[int16, *uint8](t, 3, Ptr(uint8(3)))
		success[int16, *uint16](t, 3, Ptr(uint16(3)))
		success[int16, *uint32](t, 3, Ptr(uint32(3)))
		success[int16, *uint64](t, 3, Ptr(uint64(3)))
		success[int16, *float32](t, 3, Ptr(float32(3)))
		success[int16, *float64](t, 3, Ptr(float64(3)))
		success[int16, *string](t, 3, Ptr("3"))

		fail[int16, *uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int16, *complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int16, *complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int16, *[]int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int16, *[3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int16, *func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int16, *chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int16, *map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int16, *struct{}](t, 3, errors.New("can't convert int64 to struct {}"))
	})

	t.Run("int32", func(t *testing.T) {
		success[int32, bool](t, 3, true)
		success[int32, bool](t, 0, false)
		success[int32, int](t, 3, 3)
		success[int32, int8](t, 3, 3)
		success[int32, int16](t, 3, 3)
		success[int32, int32](t, 3, 3)
		success[int32, int64](t, 3, 3)
		success[int32, uint](t, 3, 3)
		success[int32, uint8](t, 3, 3)
		success[int32, uint16](t, 3, 3)
		success[int32, uint32](t, 3, 3)
		success[int32, uint64](t, 3, 3)
		success[int32, float32](t, 3, 3)
		success[int32, float64](t, 3, 3)
		success[int32, string](t, 3, "3")
		success[int32, interface{}](t, 3, int64(3))

		fail[int32, uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int32, complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int32, complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int32, []int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int32, [3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int32, func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int32, chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int32, map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int32, struct{}](t, 3, errors.New("can't convert int64 to struct {}"))

		success[int32, *bool](t, 3, Ptr(true))
		success[int32, *bool](t, 0, Ptr(false))
		success[int32, *int](t, 3, Ptr(int(3)))
		success[int32, *int8](t, 3, Ptr(int8(3)))
		success[int32, *int16](t, 3, Ptr(int16(3)))
		success[int32, *int32](t, 3, Ptr(int32(3)))
		success[int32, *int64](t, 3, Ptr(int64(3)))
		success[int32, *uint](t, 3, Ptr(uint(3)))
		success[int32, *uint8](t, 3, Ptr(uint8(3)))
		success[int32, *uint16](t, 3, Ptr(uint16(3)))
		success[int32, *uint32](t, 3, Ptr(uint32(3)))
		success[int32, *uint64](t, 3, Ptr(uint64(3)))
		success[int32, *float32](t, 3, Ptr(float32(3)))
		success[int32, *float64](t, 3, Ptr(float64(3)))
		success[int32, *string](t, 3, Ptr("3"))

		fail[int32, *uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int32, *complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int32, *complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int32, *[]int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int32, *[3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int32, *func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int32, *chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int32, *map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int32, *struct{}](t, 3, errors.New("can't convert int64 to struct {}"))
	})

	t.Run("int64", func(t *testing.T) {
		success[int64, bool](t, 3, true)
		success[int64, bool](t, 0, false)
		success[int64, int](t, 3, 3)
		success[int64, int8](t, 3, 3)
		success[int64, int16](t, 3, 3)
		success[int64, int32](t, 3, 3)
		success[int64, int64](t, 3, 3)
		success[int64, uint](t, 3, 3)
		success[int64, uint8](t, 3, 3)
		success[int64, uint16](t, 3, 3)
		success[int64, uint32](t, 3, 3)
		success[int64, uint64](t, 3, 3)
		success[int64, float32](t, 3, 3)
		success[int64, float64](t, 3, 3)
		success[int64, string](t, 3, "3")
		success[int64, interface{}](t, 3, int64(3))

		fail[int64, uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int64, complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int64, complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int64, []int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int64, [3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int64, func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int64, chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int64, map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int64, struct{}](t, 3, errors.New("can't convert int64 to struct {}"))

		success[int64, *bool](t, 3, Ptr(true))
		success[int64, *bool](t, 0, Ptr(false))
		success[int64, *int](t, 3, Ptr(int(3)))
		success[int64, *int8](t, 3, Ptr(int8(3)))
		success[int64, *int16](t, 3, Ptr(int16(3)))
		success[int64, *int32](t, 3, Ptr(int32(3)))
		success[int64, *int64](t, 3, Ptr(int64(3)))
		success[int64, *uint](t, 3, Ptr(uint(3)))
		success[int64, *uint8](t, 3, Ptr(uint8(3)))
		success[int64, *uint16](t, 3, Ptr(uint16(3)))
		success[int64, *uint32](t, 3, Ptr(uint32(3)))
		success[int64, *uint64](t, 3, Ptr(uint64(3)))
		success[int64, *float32](t, 3, Ptr(float32(3)))
		success[int64, *float64](t, 3, Ptr(float64(3)))
		success[int64, *string](t, 3, Ptr("3"))

		fail[int64, *uintptr](t, 3, errors.New("can't convert int64 to uintptr"))
		fail[int64, *complex64](t, 3, errors.New("can't convert int64 to complex64"))
		fail[int64, *complex128](t, 3, errors.New("can't convert int64 to complex128"))
		fail[int64, *[]int](t, 3, errors.New("can't convert int64 to []int"))
		fail[int64, *[3]int](t, 3, errors.New("can't convert int64 to [3]int"))
		fail[int64, *func()](t, 3, errors.New("can't convert int64 to func()"))
		fail[int64, *chan int](t, 3, errors.New("can't convert int64 to chan int"))
		fail[int64, *map[string]bool](t, 3, errors.New("can't convert int64 to map[string]bool"))
		fail[int64, *struct{}](t, 3, errors.New("can't convert int64 to struct {}"))
	})
}

func TestConvert_Uint(t *testing.T) {

	t.Run("uint", func(t *testing.T) {
		success[uint, bool](t, 3, true)
		success[uint, bool](t, 0, false)
		success[uint, int](t, 3, 3)
		success[uint, int8](t, 3, 3)
		success[uint, int16](t, 3, 3)
		success[uint, int32](t, 3, 3)
		success[uint, int64](t, 3, 3)
		success[uint, uint](t, 3, 3)
		success[uint, uint8](t, 3, 3)
		success[uint, uint16](t, 3, 3)
		success[uint, uint32](t, 3, 3)
		success[uint, uint64](t, 3, 3)
		success[uint, float32](t, 3, 3)
		success[uint, float64](t, 3, 3)
		success[uint, string](t, 3, "3")
		success[uint, interface{}](t, 3, uint64(3))

		fail[uint, uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint, complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint, complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint, []int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint, [3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint, func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint, chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint, map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint, struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))

		success[uint, *bool](t, 3, Ptr(true))
		success[uint, *bool](t, 0, Ptr(false))
		success[uint, *int](t, 3, Ptr(int(3)))
		success[uint, *int8](t, 3, Ptr(int8(3)))
		success[uint, *int16](t, 3, Ptr(int16(3)))
		success[uint, *int32](t, 3, Ptr(int32(3)))
		success[uint, *int64](t, 3, Ptr(int64(3)))
		success[uint, *uint](t, 3, Ptr(uint(3)))
		success[uint, *uint8](t, 3, Ptr(uint8(3)))
		success[uint, *uint16](t, 3, Ptr(uint16(3)))
		success[uint, *uint32](t, 3, Ptr(uint32(3)))
		success[uint, *uint64](t, 3, Ptr(uint64(3)))
		success[uint, *float32](t, 3, Ptr(float32(3)))
		success[uint, *float64](t, 3, Ptr(float64(3)))
		success[uint, *string](t, 3, Ptr("3"))

		fail[uint, *uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint, *complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint, *complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint, *[]int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint, *[3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint, *func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint, *chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint, *map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint, *struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))
	})

	t.Run("uint8", func(t *testing.T) {
		success[uint8, bool](t, 3, true)
		success[uint8, bool](t, 0, false)
		success[uint8, int](t, 3, 3)
		success[uint8, int8](t, 3, 3)
		success[uint8, int16](t, 3, 3)
		success[uint8, int32](t, 3, 3)
		success[uint8, int64](t, 3, 3)
		success[uint8, uint](t, 3, 3)
		success[uint8, uint8](t, 3, 3)
		success[uint8, uint16](t, 3, 3)
		success[uint8, uint32](t, 3, 3)
		success[uint8, uint64](t, 3, 3)
		success[uint8, float32](t, 3, 3)
		success[uint8, float64](t, 3, 3)
		success[uint8, string](t, 3, "3")
		success[uint8, interface{}](t, 3, uint64(3))

		fail[uint8, uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint8, complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint8, complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint8, []int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint8, [3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint8, func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint8, chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint8, map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint8, struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))

		success[uint8, *bool](t, 3, Ptr(true))
		success[uint8, *bool](t, 0, Ptr(false))
		success[uint8, *int](t, 3, Ptr(int(3)))
		success[uint8, *int8](t, 3, Ptr(int8(3)))
		success[uint8, *int16](t, 3, Ptr(int16(3)))
		success[uint8, *int32](t, 3, Ptr(int32(3)))
		success[uint8, *int64](t, 3, Ptr(int64(3)))
		success[uint8, *uint](t, 3, Ptr(uint(3)))
		success[uint8, *uint8](t, 3, Ptr(uint8(3)))
		success[uint8, *uint16](t, 3, Ptr(uint16(3)))
		success[uint8, *uint32](t, 3, Ptr(uint32(3)))
		success[uint8, *uint64](t, 3, Ptr(uint64(3)))
		success[uint8, *float32](t, 3, Ptr(float32(3)))
		success[uint8, *float64](t, 3, Ptr(float64(3)))
		success[uint8, *string](t, 3, Ptr("3"))

		fail[uint8, *uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint8, *complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint8, *complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint8, *[]int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint8, *[3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint8, *func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint8, *chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint8, *map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint8, *struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))
	})

	t.Run("uint16", func(t *testing.T) {
		success[uint16, bool](t, 3, true)
		success[uint16, bool](t, 0, false)
		success[uint16, int](t, 3, 3)
		success[uint16, int8](t, 3, 3)
		success[uint16, int16](t, 3, 3)
		success[uint16, int32](t, 3, 3)
		success[uint16, int64](t, 3, 3)
		success[uint16, uint](t, 3, 3)
		success[uint16, uint8](t, 3, 3)
		success[uint16, uint16](t, 3, 3)
		success[uint16, uint32](t, 3, 3)
		success[uint16, uint64](t, 3, 3)
		success[uint16, float32](t, 3, 3)
		success[uint16, float64](t, 3, 3)
		success[uint16, string](t, 3, "3")
		success[uint16, interface{}](t, 3, uint64(3))

		fail[uint16, uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint16, complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint16, complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint16, []int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint16, [3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint16, func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint16, chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint16, map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint16, struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))

		success[uint16, *bool](t, 3, Ptr(true))
		success[uint16, *bool](t, 0, Ptr(false))
		success[uint16, *int](t, 3, Ptr(int(3)))
		success[uint16, *int8](t, 3, Ptr(int8(3)))
		success[uint16, *int16](t, 3, Ptr(int16(3)))
		success[uint16, *int32](t, 3, Ptr(int32(3)))
		success[uint16, *int64](t, 3, Ptr(int64(3)))
		success[uint16, *uint](t, 3, Ptr(uint(3)))
		success[uint16, *uint8](t, 3, Ptr(uint8(3)))
		success[uint16, *uint16](t, 3, Ptr(uint16(3)))
		success[uint16, *uint32](t, 3, Ptr(uint32(3)))
		success[uint16, *uint64](t, 3, Ptr(uint64(3)))
		success[uint16, *float32](t, 3, Ptr(float32(3)))
		success[uint16, *float64](t, 3, Ptr(float64(3)))
		success[uint16, *string](t, 3, Ptr("3"))

		fail[uint16, *uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint16, *complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint16, *complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint16, *[]int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint16, *[3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint16, *func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint16, *chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint16, *map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint16, *struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))
	})

	t.Run("uint32", func(t *testing.T) {
		success[uint32, bool](t, 3, true)
		success[uint32, bool](t, 0, false)
		success[uint32, int](t, 3, 3)
		success[uint32, int8](t, 3, 3)
		success[uint32, int16](t, 3, 3)
		success[uint32, int32](t, 3, 3)
		success[uint32, int64](t, 3, 3)
		success[uint32, uint](t, 3, 3)
		success[uint32, uint8](t, 3, 3)
		success[uint32, uint16](t, 3, 3)
		success[uint32, uint32](t, 3, 3)
		success[uint32, uint64](t, 3, 3)
		success[uint32, float32](t, 3, 3)
		success[uint32, float64](t, 3, 3)
		success[uint32, string](t, 3, "3")
		success[uint32, interface{}](t, 3, uint64(3))

		fail[uint32, uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint32, complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint32, complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint32, []int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint32, [3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint32, func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint32, chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint32, map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint32, struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))

		success[uint32, *bool](t, 3, Ptr(true))
		success[uint32, *bool](t, 0, Ptr(false))
		success[uint32, *int](t, 3, Ptr(int(3)))
		success[uint32, *int8](t, 3, Ptr(int8(3)))
		success[uint32, *int16](t, 3, Ptr(int16(3)))
		success[uint32, *int32](t, 3, Ptr(int32(3)))
		success[uint32, *int64](t, 3, Ptr(int64(3)))
		success[uint32, *uint](t, 3, Ptr(uint(3)))
		success[uint32, *uint8](t, 3, Ptr(uint8(3)))
		success[uint32, *uint16](t, 3, Ptr(uint16(3)))
		success[uint32, *uint32](t, 3, Ptr(uint32(3)))
		success[uint32, *uint64](t, 3, Ptr(uint64(3)))
		success[uint32, *float32](t, 3, Ptr(float32(3)))
		success[uint32, *float64](t, 3, Ptr(float64(3)))
		success[uint32, *string](t, 3, Ptr("3"))

		fail[uint32, *uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint32, *complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint32, *complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint32, *[]int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint32, *[3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint32, *func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint32, *chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint32, *map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint32, *struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))
	})

	t.Run("uint64", func(t *testing.T) {
		success[uint64, bool](t, 3, true)
		success[uint64, bool](t, 0, false)
		success[uint64, int](t, 3, 3)
		success[uint64, int8](t, 3, 3)
		success[uint64, int16](t, 3, 3)
		success[uint64, int32](t, 3, 3)
		success[uint64, int64](t, 3, 3)
		success[uint64, uint](t, 3, 3)
		success[uint64, uint8](t, 3, 3)
		success[uint64, uint16](t, 3, 3)
		success[uint64, uint32](t, 3, 3)
		success[uint64, uint64](t, 3, 3)
		success[uint64, float32](t, 3, 3)
		success[uint64, float64](t, 3, 3)
		success[uint64, string](t, 3, "3")
		success[uint64, interface{}](t, 3, uint64(3))

		fail[uint64, uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint64, complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint64, complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint64, []int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint64, [3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint64, func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint64, chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint64, map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint64, struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))

		success[uint64, *bool](t, 3, Ptr(true))
		success[uint64, *bool](t, 0, Ptr(false))
		success[uint64, *int](t, 3, Ptr(int(3)))
		success[uint64, *int8](t, 3, Ptr(int8(3)))
		success[uint64, *int16](t, 3, Ptr(int16(3)))
		success[uint64, *int32](t, 3, Ptr(int32(3)))
		success[uint64, *int64](t, 3, Ptr(int64(3)))
		success[uint64, *uint](t, 3, Ptr(uint(3)))
		success[uint64, *uint8](t, 3, Ptr(uint8(3)))
		success[uint64, *uint16](t, 3, Ptr(uint16(3)))
		success[uint64, *uint32](t, 3, Ptr(uint32(3)))
		success[uint64, *uint64](t, 3, Ptr(uint64(3)))
		success[uint64, *float32](t, 3, Ptr(float32(3)))
		success[uint64, *float64](t, 3, Ptr(float64(3)))
		success[uint64, *string](t, 3, Ptr("3"))

		fail[uint64, *uintptr](t, 3, errors.New("can't convert uint64 to uintptr"))
		fail[uint64, *complex64](t, 3, errors.New("can't convert uint64 to complex64"))
		fail[uint64, *complex128](t, 3, errors.New("can't convert uint64 to complex128"))
		fail[uint64, *[]int](t, 3, errors.New("can't convert uint64 to []int"))
		fail[uint64, *[3]int](t, 3, errors.New("can't convert uint64 to [3]int"))
		fail[uint64, *func()](t, 3, errors.New("can't convert uint64 to func()"))
		fail[uint64, *chan int](t, 3, errors.New("can't convert uint64 to chan int"))
		fail[uint64, *map[string]bool](t, 3, errors.New("can't convert uint64 to map[string]bool"))
		fail[uint64, *struct{}](t, 3, errors.New("can't convert uint64 to struct {}"))
	})
}

func TestConvert_Float(t *testing.T) {

	t.Run("float32", func(t *testing.T) {
		success[float32, bool](t, 3, true)
		success[float32, bool](t, 0, false)
		success[float32, int](t, 3, 3)
		success[float32, int8](t, 3, 3)
		success[float32, int16](t, 3, 3)
		success[float32, int32](t, 3, 3)
		success[float32, int64](t, 3, 3)
		success[float32, uint](t, 3, 3)
		success[float32, uint8](t, 3, 3)
		success[float32, uint16](t, 3, 3)
		success[float32, uint32](t, 3, 3)
		success[float32, uint64](t, 3, 3)
		success[float32, float32](t, 3, 3)
		success[float32, float64](t, 3, 3)
		success[float32, string](t, 3, "3")
		success[float32, interface{}](t, 3, float64(3))

		fail[float32, uintptr](t, 3, errors.New("can't convert float64 to uintptr"))
		fail[float32, complex64](t, 3, errors.New("can't convert float64 to complex64"))
		fail[float32, complex128](t, 3, errors.New("can't convert float64 to complex128"))
		fail[float32, []int](t, 3, errors.New("can't convert float64 to []int"))
		fail[float32, [3]int](t, 3, errors.New("can't convert float64 to [3]int"))
		fail[float32, func()](t, 3, errors.New("can't convert float64 to func()"))
		fail[float32, chan int](t, 3, errors.New("can't convert float64 to chan int"))
		fail[float32, map[string]bool](t, 3, errors.New("can't convert float64 to map[string]bool"))
		fail[float32, struct{}](t, 3, errors.New("can't convert float64 to struct {}"))

		success[float32, *bool](t, 3, Ptr(true))
		success[float32, *bool](t, 0, Ptr(false))
		success[float32, *int](t, 3, Ptr(int(3)))
		success[float32, *int8](t, 3, Ptr(int8(3)))
		success[float32, *int16](t, 3, Ptr(int16(3)))
		success[float32, *int32](t, 3, Ptr(int32(3)))
		success[float32, *int64](t, 3, Ptr(int64(3)))
		success[float32, *uint](t, 3, Ptr(uint(3)))
		success[float32, *uint8](t, 3, Ptr(uint8(3)))
		success[float32, *uint16](t, 3, Ptr(uint16(3)))
		success[float32, *uint32](t, 3, Ptr(uint32(3)))
		success[float32, *uint64](t, 3, Ptr(uint64(3)))
		success[float32, *float32](t, 3, Ptr(float32(3)))
		success[float32, *float64](t, 3, Ptr(float64(3)))
		success[float32, *string](t, 3, Ptr("3"))

		fail[float32, *uintptr](t, 3, errors.New("can't convert float64 to uintptr"))
		fail[float32, *complex64](t, 3, errors.New("can't convert float64 to complex64"))
		fail[float32, *complex128](t, 3, errors.New("can't convert float64 to complex128"))
		fail[float32, *[]int](t, 3, errors.New("can't convert float64 to []int"))
		fail[float32, *[3]int](t, 3, errors.New("can't convert float64 to [3]int"))
		fail[float32, *func()](t, 3, errors.New("can't convert float64 to func()"))
		fail[float32, *chan int](t, 3, errors.New("can't convert float64 to chan int"))
		fail[float32, *map[string]bool](t, 3, errors.New("can't convert float64 to map[string]bool"))
		fail[float32, *struct{}](t, 3, errors.New("can't convert float64 to struct {}"))
	})

	t.Run("float64", func(t *testing.T) {
		success[float64, bool](t, 3, true)
		success[float64, bool](t, 0, false)
		success[float64, int](t, 3, 3)
		success[float64, int8](t, 3, 3)
		success[float64, int16](t, 3, 3)
		success[float64, int32](t, 3, 3)
		success[float64, int64](t, 3, 3)
		success[float64, uint](t, 3, 3)
		success[float64, uint8](t, 3, 3)
		success[float64, uint16](t, 3, 3)
		success[float64, uint32](t, 3, 3)
		success[float64, uint64](t, 3, 3)
		success[float64, float32](t, 3, 3)
		success[float64, float64](t, 3, 3)
		success[float64, string](t, 3, "3")
		success[float64, interface{}](t, 3, float64(3))

		fail[float64, uintptr](t, 3, errors.New("can't convert float64 to uintptr"))
		fail[float64, complex64](t, 3, errors.New("can't convert float64 to complex64"))
		fail[float64, complex128](t, 3, errors.New("can't convert float64 to complex128"))
		fail[float64, []int](t, 3, errors.New("can't convert float64 to []int"))
		fail[float64, [3]int](t, 3, errors.New("can't convert float64 to [3]int"))
		fail[float64, func()](t, 3, errors.New("can't convert float64 to func()"))
		fail[float64, chan int](t, 3, errors.New("can't convert float64 to chan int"))
		fail[float64, map[string]bool](t, 3, errors.New("can't convert float64 to map[string]bool"))
		fail[float64, struct{}](t, 3, errors.New("can't convert float64 to struct {}"))

		success[float64, *bool](t, 3, Ptr(true))
		success[float64, *bool](t, 0, Ptr(false))
		success[float64, *int](t, 3, Ptr(int(3)))
		success[float64, *int8](t, 3, Ptr(int8(3)))
		success[float64, *int16](t, 3, Ptr(int16(3)))
		success[float64, *int32](t, 3, Ptr(int32(3)))
		success[float64, *int64](t, 3, Ptr(int64(3)))
		success[float64, *uint](t, 3, Ptr(uint(3)))
		success[float64, *uint8](t, 3, Ptr(uint8(3)))
		success[float64, *uint16](t, 3, Ptr(uint16(3)))
		success[float64, *uint32](t, 3, Ptr(uint32(3)))
		success[float64, *uint64](t, 3, Ptr(uint64(3)))
		success[float64, *float32](t, 3, Ptr(float32(3)))
		success[float64, *float64](t, 3, Ptr(float64(3)))
		success[float64, *string](t, 3, Ptr("3"))

		fail[float64, *uintptr](t, 3, errors.New("can't convert float64 to uintptr"))
		fail[float64, *complex64](t, 3, errors.New("can't convert float64 to complex64"))
		fail[float64, *complex128](t, 3, errors.New("can't convert float64 to complex128"))
		fail[float64, *[]int](t, 3, errors.New("can't convert float64 to []int"))
		fail[float64, *[3]int](t, 3, errors.New("can't convert float64 to [3]int"))
		fail[float64, *func()](t, 3, errors.New("can't convert float64 to func()"))
		fail[float64, *chan int](t, 3, errors.New("can't convert float64 to chan int"))
		fail[float64, *map[string]bool](t, 3, errors.New("can't convert float64 to map[string]bool"))
		fail[float64, *struct{}](t, 3, errors.New("can't convert float64 to struct {}"))
	})
}
