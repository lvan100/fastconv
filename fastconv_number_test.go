/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fastconv

import "testing"

func TestConvert_Int(t *testing.T) {

	t.Run("int", func(t *testing.T) {
		success(t, int(3), true)
		success(t, int(0), false)
		success(t, int(3), int(3))
		success(t, int(3), int8(3))
		success(t, int(3), int16(3))
		success(t, int(3), int32(3))
		success(t, int(3), int64(3))
		success(t, int(3), uint(3))
		success(t, int(3), uint8(3))
		success(t, int(3), uint16(3))
		success(t, int(3), uint32(3))
		success(t, int(3), uint64(3))
		success(t, int(3), float32(3))
		success(t, int(3), float64(3))
		success(t, int(3), string("3"))

		success(t, int(3), Ptr(true))
		success(t, int(0), Ptr(false))
		success(t, int(3), Ptr(int(3)))
		success(t, int(3), Ptr(int8(3)))
		success(t, int(3), Ptr(int16(3)))
		success(t, int(3), Ptr(int32(3)))
		success(t, int(3), Ptr(int64(3)))
		success(t, int(3), Ptr(uint(3)))
		success(t, int(3), Ptr(uint8(3)))
		success(t, int(3), Ptr(uint16(3)))
		success(t, int(3), Ptr(uint32(3)))
		success(t, int(3), Ptr(uint64(3)))
		success(t, int(3), Ptr(float32(3)))
		success(t, int(3), Ptr(float64(3)))
		success(t, int(3), Ptr(string("3")))
	})

	t.Run("int8", func(t *testing.T) {
		success(t, int8(3), true)
		success(t, int8(0), false)
		success(t, int8(3), int(3))
		success(t, int8(3), int8(3))
		success(t, int8(3), int16(3))
		success(t, int8(3), int32(3))
		success(t, int8(3), int64(3))
		success(t, int8(3), uint(3))
		success(t, int8(3), uint8(3))
		success(t, int8(3), uint16(3))
		success(t, int8(3), uint32(3))
		success(t, int8(3), uint64(3))
		success(t, int8(3), float32(3))
		success(t, int8(3), float64(3))
		success(t, int8(3), string("3"))

		success(t, int8(3), Ptr(true))
		success(t, int8(0), Ptr(false))
		success(t, int8(3), Ptr(int(3)))
		success(t, int8(3), Ptr(int8(3)))
		success(t, int8(3), Ptr(int16(3)))
		success(t, int8(3), Ptr(int32(3)))
		success(t, int8(3), Ptr(int64(3)))
		success(t, int8(3), Ptr(uint(3)))
		success(t, int8(3), Ptr(uint8(3)))
		success(t, int8(3), Ptr(uint16(3)))
		success(t, int8(3), Ptr(uint32(3)))
		success(t, int8(3), Ptr(uint64(3)))
		success(t, int8(3), Ptr(float32(3)))
		success(t, int8(3), Ptr(float64(3)))
		success(t, int8(3), Ptr(string("3")))
	})

	t.Run("int16", func(t *testing.T) {
		success(t, int16(3), true)
		success(t, int16(0), false)
		success(t, int16(3), int(3))
		success(t, int16(3), int8(3))
		success(t, int16(3), int16(3))
		success(t, int16(3), int32(3))
		success(t, int16(3), int64(3))
		success(t, int16(3), uint(3))
		success(t, int16(3), uint8(3))
		success(t, int16(3), uint16(3))
		success(t, int16(3), uint32(3))
		success(t, int16(3), uint64(3))
		success(t, int16(3), float32(3))
		success(t, int16(3), float64(3))
		success(t, int16(3), string("3"))

		success(t, int16(3), Ptr(true))
		success(t, int16(0), Ptr(false))
		success(t, int16(3), Ptr(int(3)))
		success(t, int16(3), Ptr(int8(3)))
		success(t, int16(3), Ptr(int16(3)))
		success(t, int16(3), Ptr(int32(3)))
		success(t, int16(3), Ptr(int64(3)))
		success(t, int16(3), Ptr(uint(3)))
		success(t, int16(3), Ptr(uint8(3)))
		success(t, int16(3), Ptr(uint16(3)))
		success(t, int16(3), Ptr(uint32(3)))
		success(t, int16(3), Ptr(uint64(3)))
		success(t, int16(3), Ptr(float32(3)))
		success(t, int16(3), Ptr(float64(3)))
		success(t, int16(3), Ptr(string("3")))
	})

	t.Run("int32", func(t *testing.T) {
		success(t, int32(3), true)
		success(t, int32(0), false)
		success(t, int32(3), int(3))
		success(t, int32(3), int8(3))
		success(t, int32(3), int16(3))
		success(t, int32(3), int32(3))
		success(t, int32(3), int64(3))
		success(t, int32(3), uint(3))
		success(t, int32(3), uint8(3))
		success(t, int32(3), uint16(3))
		success(t, int32(3), uint32(3))
		success(t, int32(3), uint64(3))
		success(t, int32(3), float32(3))
		success(t, int32(3), float64(3))
		success(t, int32(3), string("3"))

		success(t, int32(3), Ptr(true))
		success(t, int32(0), Ptr(false))
		success(t, int32(3), Ptr(int(3)))
		success(t, int32(3), Ptr(int8(3)))
		success(t, int32(3), Ptr(int16(3)))
		success(t, int32(3), Ptr(int32(3)))
		success(t, int32(3), Ptr(int64(3)))
		success(t, int32(3), Ptr(uint(3)))
		success(t, int32(3), Ptr(uint8(3)))
		success(t, int32(3), Ptr(uint16(3)))
		success(t, int32(3), Ptr(uint32(3)))
		success(t, int32(3), Ptr(uint64(3)))
		success(t, int32(3), Ptr(float32(3)))
		success(t, int32(3), Ptr(float64(3)))
		success(t, int32(3), Ptr(string("3")))
	})

	t.Run("int64", func(t *testing.T) {
		success(t, int64(3), true)
		success(t, int64(0), false)
		success(t, int64(3), int(3))
		success(t, int64(3), int8(3))
		success(t, int64(3), int16(3))
		success(t, int64(3), int32(3))
		success(t, int64(3), int64(3))
		success(t, int64(3), uint(3))
		success(t, int64(3), uint8(3))
		success(t, int64(3), uint16(3))
		success(t, int64(3), uint32(3))
		success(t, int64(3), uint64(3))
		success(t, int64(3), float32(3))
		success(t, int64(3), float64(3))
		success(t, int64(3), string("3"))

		success(t, int64(3), Ptr(true))
		success(t, int64(0), Ptr(false))
		success(t, int64(3), Ptr(int(3)))
		success(t, int64(3), Ptr(int8(3)))
		success(t, int64(3), Ptr(int16(3)))
		success(t, int64(3), Ptr(int32(3)))
		success(t, int64(3), Ptr(int64(3)))
		success(t, int64(3), Ptr(uint(3)))
		success(t, int64(3), Ptr(uint8(3)))
		success(t, int64(3), Ptr(uint16(3)))
		success(t, int64(3), Ptr(uint32(3)))
		success(t, int64(3), Ptr(uint64(3)))
		success(t, int64(3), Ptr(float32(3)))
		success(t, int64(3), Ptr(float64(3)))
		success(t, int64(3), Ptr(string("3")))
	})
}

func TestConvert_Uint(t *testing.T) {

	t.Run("uint", func(t *testing.T) {
		success(t, uint(3), true)
		success(t, uint(0), false)
		success(t, uint(3), int(3))
		success(t, uint(3), int8(3))
		success(t, uint(3), int16(3))
		success(t, uint(3), int32(3))
		success(t, uint(3), int64(3))
		success(t, uint(3), uint(3))
		success(t, uint(3), uint8(3))
		success(t, uint(3), uint16(3))
		success(t, uint(3), uint32(3))
		success(t, uint(3), uint64(3))
		success(t, uint(3), float32(3))
		success(t, uint(3), float64(3))
		success(t, uint(3), string("3"))

		success(t, uint(3), Ptr(true))
		success(t, uint(0), Ptr(false))
		success(t, uint(3), Ptr(int(3)))
		success(t, uint(3), Ptr(int8(3)))
		success(t, uint(3), Ptr(int16(3)))
		success(t, uint(3), Ptr(int32(3)))
		success(t, uint(3), Ptr(int64(3)))
		success(t, uint(3), Ptr(uint(3)))
		success(t, uint(3), Ptr(uint8(3)))
		success(t, uint(3), Ptr(uint16(3)))
		success(t, uint(3), Ptr(uint32(3)))
		success(t, uint(3), Ptr(uint64(3)))
		success(t, uint(3), Ptr(float32(3)))
		success(t, uint(3), Ptr(float64(3)))
		success(t, uint(3), Ptr(string("3")))
	})

	t.Run("uint8", func(t *testing.T) {
		success(t, uint8(3), true)
		success(t, uint8(0), false)
		success(t, uint8(3), int(3))
		success(t, uint8(3), int8(3))
		success(t, uint8(3), int16(3))
		success(t, uint8(3), int32(3))
		success(t, uint8(3), int64(3))
		success(t, uint8(3), uint(3))
		success(t, uint8(3), uint8(3))
		success(t, uint8(3), uint16(3))
		success(t, uint8(3), uint32(3))
		success(t, uint8(3), uint64(3))
		success(t, uint8(3), float32(3))
		success(t, uint8(3), float64(3))
		success(t, uint8(3), string("3"))

		success(t, uint8(3), Ptr(true))
		success(t, uint8(0), Ptr(false))
		success(t, uint8(3), Ptr(int(3)))
		success(t, uint8(3), Ptr(int8(3)))
		success(t, uint8(3), Ptr(int16(3)))
		success(t, uint8(3), Ptr(int32(3)))
		success(t, uint8(3), Ptr(int64(3)))
		success(t, uint8(3), Ptr(uint(3)))
		success(t, uint8(3), Ptr(uint8(3)))
		success(t, uint8(3), Ptr(uint16(3)))
		success(t, uint8(3), Ptr(uint32(3)))
		success(t, uint8(3), Ptr(uint64(3)))
		success(t, uint8(3), Ptr(float32(3)))
		success(t, uint8(3), Ptr(float64(3)))
		success(t, uint8(3), Ptr(string("3")))
	})

	t.Run("uint16", func(t *testing.T) {
		success(t, uint16(3), true)
		success(t, uint16(0), false)
		success(t, uint16(3), int(3))
		success(t, uint16(3), int8(3))
		success(t, uint16(3), int16(3))
		success(t, uint16(3), int32(3))
		success(t, uint16(3), int64(3))
		success(t, uint16(3), uint(3))
		success(t, uint16(3), uint8(3))
		success(t, uint16(3), uint16(3))
		success(t, uint16(3), uint32(3))
		success(t, uint16(3), uint64(3))
		success(t, uint16(3), float32(3))
		success(t, uint16(3), float64(3))
		success(t, uint16(3), string("3"))

		success(t, uint16(3), Ptr(true))
		success(t, uint16(0), Ptr(false))
		success(t, uint16(3), Ptr(int(3)))
		success(t, uint16(3), Ptr(int8(3)))
		success(t, uint16(3), Ptr(int16(3)))
		success(t, uint16(3), Ptr(int32(3)))
		success(t, uint16(3), Ptr(int64(3)))
		success(t, uint16(3), Ptr(uint(3)))
		success(t, uint16(3), Ptr(uint8(3)))
		success(t, uint16(3), Ptr(uint16(3)))
		success(t, uint16(3), Ptr(uint32(3)))
		success(t, uint16(3), Ptr(uint64(3)))
		success(t, uint16(3), Ptr(float32(3)))
		success(t, uint16(3), Ptr(float64(3)))
		success(t, uint16(3), Ptr(string("3")))
	})

	t.Run("uint32", func(t *testing.T) {
		success(t, uint32(3), true)
		success(t, uint32(0), false)
		success(t, uint32(3), int(3))
		success(t, uint32(3), int8(3))
		success(t, uint32(3), int16(3))
		success(t, uint32(3), int32(3))
		success(t, uint32(3), int64(3))
		success(t, uint32(3), uint(3))
		success(t, uint32(3), uint8(3))
		success(t, uint32(3), uint16(3))
		success(t, uint32(3), uint32(3))
		success(t, uint32(3), uint64(3))
		success(t, uint32(3), float32(3))
		success(t, uint32(3), float64(3))
		success(t, uint32(3), string("3"))

		success(t, uint32(3), Ptr(true))
		success(t, uint32(0), Ptr(false))
		success(t, uint32(3), Ptr(int(3)))
		success(t, uint32(3), Ptr(int8(3)))
		success(t, uint32(3), Ptr(int16(3)))
		success(t, uint32(3), Ptr(int32(3)))
		success(t, uint32(3), Ptr(int64(3)))
		success(t, uint32(3), Ptr(uint(3)))
		success(t, uint32(3), Ptr(uint8(3)))
		success(t, uint32(3), Ptr(uint16(3)))
		success(t, uint32(3), Ptr(uint32(3)))
		success(t, uint32(3), Ptr(uint64(3)))
		success(t, uint32(3), Ptr(float32(3)))
		success(t, uint32(3), Ptr(float64(3)))
		success(t, uint32(3), Ptr(string("3")))
	})

	t.Run("uint64", func(t *testing.T) {
		success(t, uint64(3), true)
		success(t, uint64(0), false)
		success(t, uint64(3), int(3))
		success(t, uint64(3), int8(3))
		success(t, uint64(3), int16(3))
		success(t, uint64(3), int32(3))
		success(t, uint64(3), int64(3))
		success(t, uint64(3), uint(3))
		success(t, uint64(3), uint8(3))
		success(t, uint64(3), uint16(3))
		success(t, uint64(3), uint32(3))
		success(t, uint64(3), uint64(3))
		success(t, uint64(3), float32(3))
		success(t, uint64(3), float64(3))
		success(t, uint64(3), string("3"))

		success(t, uint64(3), Ptr(true))
		success(t, uint64(0), Ptr(false))
		success(t, uint64(3), Ptr(int(3)))
		success(t, uint64(3), Ptr(int8(3)))
		success(t, uint64(3), Ptr(int16(3)))
		success(t, uint64(3), Ptr(int32(3)))
		success(t, uint64(3), Ptr(int64(3)))
		success(t, uint64(3), Ptr(uint(3)))
		success(t, uint64(3), Ptr(uint8(3)))
		success(t, uint64(3), Ptr(uint16(3)))
		success(t, uint64(3), Ptr(uint32(3)))
		success(t, uint64(3), Ptr(uint64(3)))
		success(t, uint64(3), Ptr(float32(3)))
		success(t, uint64(3), Ptr(float64(3)))
		success(t, uint64(3), Ptr(string("3")))
	})
}

func TestConvert_Float(t *testing.T) {

	t.Run("float32", func(t *testing.T) {
		success(t, float32(3), true)
		success(t, float32(0), false)
		success(t, float32(3), int(3))
		success(t, float32(3), int8(3))
		success(t, float32(3), int16(3))
		success(t, float32(3), int32(3))
		success(t, float32(3), int64(3))
		success(t, float32(3), uint(3))
		success(t, float32(3), uint8(3))
		success(t, float32(3), uint16(3))
		success(t, float32(3), uint32(3))
		success(t, float32(3), uint64(3))
		success(t, float32(3), float32(3))
		success(t, float32(3), float64(3))
		success(t, float32(3), string("3"))

		success(t, float32(3), Ptr(true))
		success(t, float32(0), Ptr(false))
		success(t, float32(3), Ptr(int(3)))
		success(t, float32(3), Ptr(int8(3)))
		success(t, float32(3), Ptr(int16(3)))
		success(t, float32(3), Ptr(int32(3)))
		success(t, float32(3), Ptr(int64(3)))
		success(t, float32(3), Ptr(uint(3)))
		success(t, float32(3), Ptr(uint8(3)))
		success(t, float32(3), Ptr(uint16(3)))
		success(t, float32(3), Ptr(uint32(3)))
		success(t, float32(3), Ptr(uint64(3)))
		success(t, float32(3), Ptr(float32(3)))
		success(t, float32(3), Ptr(float64(3)))
		success(t, float32(3), Ptr(string("3")))
	})

	t.Run("float64", func(t *testing.T) {
		success(t, float64(3), true)
		success(t, float64(0), false)
		success(t, float64(3), int(3))
		success(t, float64(3), int8(3))
		success(t, float64(3), int16(3))
		success(t, float64(3), int32(3))
		success(t, float64(3), int64(3))
		success(t, float64(3), uint(3))
		success(t, float64(3), uint8(3))
		success(t, float64(3), uint16(3))
		success(t, float64(3), uint32(3))
		success(t, float64(3), uint64(3))
		success(t, float64(3), float32(3))
		success(t, float64(3), float64(3))
		success(t, float64(3), string("3"))

		success(t, float64(3), Ptr(true))
		success(t, float64(0), Ptr(false))
		success(t, float64(3), Ptr(int(3)))
		success(t, float64(3), Ptr(int8(3)))
		success(t, float64(3), Ptr(int16(3)))
		success(t, float64(3), Ptr(int32(3)))
		success(t, float64(3), Ptr(int64(3)))
		success(t, float64(3), Ptr(uint(3)))
		success(t, float64(3), Ptr(uint8(3)))
		success(t, float64(3), Ptr(uint16(3)))
		success(t, float64(3), Ptr(uint32(3)))
		success(t, float64(3), Ptr(uint64(3)))
		success(t, float64(3), Ptr(float32(3)))
		success(t, float64(3), Ptr(float64(3)))
		success(t, float64(3), Ptr(string("3")))
	})
}
